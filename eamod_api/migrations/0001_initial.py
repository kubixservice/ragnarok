# Generated by Django 2.1.3 on 2018-12-03 13:45

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BgSkillCount',
            fields=[
                ('char_id', models.OneToOneField(db_column='char_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='bg_skills', serialize=False, to='core.Char')),
                ('skill_id', models.SmallIntegerField(db_column='id')),
                ('count', models.IntegerField()),
            ],
            options={
                'db_table': 'bg_skill_count',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharBg',
            fields=[
                ('char_id', models.OneToOneField(db_column='char_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='bg_char', serialize=False, to='core.Char')),
                ('top_damage', models.IntegerField()),
                ('damage_done', models.IntegerField()),
                ('damage_received', models.IntegerField()),
                ('skulls', models.IntegerField()),
                ('ti_wins', models.IntegerField()),
                ('ti_lost', models.IntegerField()),
                ('ti_tie', models.IntegerField()),
                ('eos_flags', models.IntegerField()),
                ('eos_bases', models.IntegerField()),
                ('eos_wins', models.IntegerField()),
                ('eos_lost', models.IntegerField()),
                ('eos_tie', models.IntegerField()),
                ('boss_killed', models.IntegerField()),
                ('boss_damage', models.IntegerField()),
                ('boss_flags', models.IntegerField()),
                ('boss_wins', models.IntegerField()),
                ('boss_lost', models.IntegerField()),
                ('boss_tie', models.IntegerField()),
                ('dom_bases', models.IntegerField()),
                ('dom_off_kills', models.IntegerField()),
                ('dom_def_kills', models.IntegerField()),
                ('dom_wins', models.IntegerField()),
                ('dom_lost', models.IntegerField()),
                ('dom_tie', models.IntegerField()),
                ('td_kills', models.IntegerField()),
                ('td_deaths', models.IntegerField()),
                ('td_wins', models.IntegerField()),
                ('td_lost', models.IntegerField()),
                ('td_tie', models.IntegerField()),
                ('sc_stole', models.IntegerField()),
                ('sc_captured', models.IntegerField()),
                ('sc_droped', models.IntegerField()),
                ('sc_wins', models.IntegerField()),
                ('sc_lost', models.IntegerField()),
                ('sc_tie', models.IntegerField()),
                ('ctf_taken', models.IntegerField()),
                ('ctf_captured', models.IntegerField()),
                ('ctf_droped', models.IntegerField()),
                ('ctf_wins', models.IntegerField()),
                ('ctf_lost', models.IntegerField()),
                ('ctf_tie', models.IntegerField()),
                ('emperium_kill', models.IntegerField()),
                ('barricade_kill', models.IntegerField()),
                ('gstone_kill', models.IntegerField()),
                ('cq_wins', models.IntegerField()),
                ('cq_lost', models.IntegerField()),
                ('kill_count', models.IntegerField()),
                ('death_count', models.IntegerField()),
                ('win', models.IntegerField()),
                ('lost', models.IntegerField()),
                ('tie', models.IntegerField()),
                ('leader_win', models.IntegerField()),
                ('leader_lost', models.IntegerField()),
                ('leader_tie', models.IntegerField()),
                ('deserter', models.IntegerField()),
                ('score', models.IntegerField()),
                ('points', models.IntegerField()),
                ('sp_heal_potions', models.IntegerField()),
                ('hp_heal_potions', models.IntegerField()),
                ('yellow_gemstones', models.IntegerField()),
                ('red_gemstones', models.IntegerField()),
                ('blue_gemstones', models.IntegerField()),
                ('poison_bottles', models.IntegerField()),
                ('acid_demostration', models.IntegerField()),
                ('acid_demostration_fail', models.IntegerField()),
                ('support_skills_used', models.IntegerField()),
                ('healing_done', models.IntegerField()),
                ('wrong_support_skills_used', models.IntegerField()),
                ('wrong_healing_done', models.IntegerField()),
                ('sp_used', models.IntegerField()),
                ('zeny_used', models.IntegerField()),
                ('spiritb_used', models.IntegerField()),
                ('ammo_used', models.IntegerField()),
                ('rank_points', models.IntegerField()),
                ('rank_games', models.IntegerField()),
                ('ru_captures', models.IntegerField()),
                ('ru_wins', models.IntegerField()),
                ('ru_lost', models.IntegerField()),
            ],
            options={
                'db_table': 'char_bg',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharBgLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('killer', models.CharField(max_length=25)),
                ('killed', models.CharField(max_length=25)),
                ('map', models.CharField(max_length=11)),
                ('skill', models.IntegerField()),
            ],
            options={
                'db_table': 'char_bg_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharWoeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('killer', models.CharField(max_length=25)),
                ('killed', models.CharField(max_length=25)),
                ('map', models.CharField(max_length=11)),
                ('skill', models.IntegerField()),
            ],
            options={
                'db_table': 'char_woe_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharWstats',
            fields=[
                ('char_id', models.OneToOneField(db_column='char_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='woe_char', serialize=False, to='core.Char')),
                ('kill_count', models.IntegerField()),
                ('death_count', models.IntegerField()),
                ('score', models.IntegerField()),
                ('top_damage', models.IntegerField()),
                ('damage_done', models.IntegerField()),
                ('damage_received', models.IntegerField()),
                ('emperium_damage', models.IntegerField()),
                ('guardian_damage', models.IntegerField()),
                ('barricade_damage', models.IntegerField()),
                ('gstone_damage', models.IntegerField()),
                ('emperium_kill', models.IntegerField()),
                ('guardian_kill', models.IntegerField()),
                ('barricade_kill', models.IntegerField()),
                ('gstone_kill', models.IntegerField()),
                ('sp_heal_potions', models.IntegerField()),
                ('hp_heal_potions', models.IntegerField()),
                ('yellow_gemstones', models.IntegerField()),
                ('red_gemstones', models.IntegerField()),
                ('blue_gemstones', models.IntegerField()),
                ('poison_bottles', models.IntegerField()),
                ('acid_demostration', models.IntegerField()),
                ('acid_demostration_fail', models.IntegerField()),
                ('support_skills_used', models.IntegerField()),
                ('healing_done', models.IntegerField()),
                ('wrong_support_skills_used', models.IntegerField()),
                ('wrong_healing_done', models.IntegerField()),
                ('sp_used', models.IntegerField()),
                ('zeny_used', models.IntegerField()),
                ('spiritb_used', models.IntegerField()),
                ('ammo_used', models.IntegerField()),
                ('woe_date', models.DateField()),
            ],
            options={
                'db_table': 'char_wstats',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SkillCount',
            fields=[
                ('char_id', models.OneToOneField(db_column='char_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='woe_skills', serialize=False, to='core.Char')),
                ('skill_id', models.SmallIntegerField(db_column='id')),
                ('count', models.IntegerField()),
                ('woe_date', models.DateField()),
            ],
            options={
                'db_table': 'skill_count',
                'managed': False,
            },
        ),
    ]
